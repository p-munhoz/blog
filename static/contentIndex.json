{"airbyte-gcp":{"title":"How to host Airbyte on Google Cloud Platform?","links":[],"tags":[],"content":"In this article I’ll show you how to setup Airbyte on Google Cloud Platform.\nAccording to Airbyte documentation here the requirements:\n\nTo test Airbyte, we recommend an e2.medium instance and provision at least 30GBs of disk per node\nTo deploy Airbyte in a production environment, we recommend a n1-standard-2 instance\n\nSetup of Airbyte on the VM\nCreate your Virtual Machine\nInstall docker &amp; docker-compose\nInstall docker on your VM\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\ncurl -fsSL download.docker.com/linux/debian/gpg | sudo apt-key add --\nsudo add-apt-repository &quot;deb [arch=amd64] download.docker.com/linux/debian buster stable&quot;\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io\nsudo usermod -a -G docker $USER\nThen install docker compose\nsudo apt-get -y install docker-compose-plugin\ndocker compose version\nThen close your SSH connection and open it again to take into account the modifications.\nInstall Airbyte\nmkdir airbyte &amp;&amp; cd airbyte\nwget raw.githubusercontent.com/airbytehq/airbyte/master/run-ab-platform.sh\nchmod +x run-ab-platform.sh\n./run-ab-platform.sh -b\nConnection to your Airbyte instance\nNow that you’ve set up Airbyte on your machine and started the instance, you can mirror it but running this command and access it here http://localhost:8000.\ngcloud --project=$PROJECT_ID beta compute ssh $INSTANCE_NAME -- -L 8000:localhost:8000 -N -f"},"how-to-delete-old-dbt-models-bigquery":{"title":"How to remove deleted dbt models in BigQuery?","links":[],"tags":["bigquery","dbt"],"content":"Context\nI’m pretty sure that you already had renamed or removed a model in dbt and after few weeks/months you noticed that you have the old model and the new one that co-exist in your data warehouse.\nThis is particularly annoying because it can be misleading especially when you aren’t the owner of the table and you don’t know which one is deprecated.\nUnfortunately, dbt doesn’t offer the possibility to remove with just a command the deprecated models. But the good news is that with macros you can find a way to do it.\nTwo macros (or one if you want)\nI created two macros to do it:\n\nlist_deleted_models.sql\n\n{% macro list_deleted_models() -%}\n \n    -- First step, listing all the current_models\n    {%- if execute -%}\n        {%- set current_models = [] -%}\n        {%- for node in graph.nodes.values() -%}\n            {%- do current_models.append(node.name) -%}\n        {%- endfor -%}\n    {%- endif -%}\n \n    -- Extract the table_catalog, schema, table_name and command &#039;BASE + the name of the table&#039;\n    select\n        table_catalog,\n        table_schema,\n        table_name,\n        concat(\n            replace(table_type, &#039;BASE &#039;, &#039;&#039;),\n            concat(\n                &#039; `{{target.database}}.{{target.schema}}&#039;, &#039;.&#039;, concat(table_name, &#039;`&#039;)\n            )\n        ) as command\n    from `region-eu.information_schema.tables` -- Since I have my datasets set on the EU region this is why I use this to list all existing tables\n    where\n        -- I filter all tables that doesn&#039;t exist in my current_models variable\n        upper(table_name) not in (\n            {%- for model in current_models -%}\n                &#039;{{ model.upper() }}&#039; {%- if not loop.last -%}, {% endif -%}\n            {%- endfor -%}\n        )\n        -- I filter by using regex in order to only check models in staging/hub/mart/expo/snapshot/seeds layers to avoid removing raw data\n        and regexp_contains(\n            lower(table_name), r&#039;^(stg|prep|fact|fct|dim|mart|expo|snapshot|seed)_&#039;\n        )\n        and regexp_contains(\n            lower(table_schema), r&#039;_(staging|seeds|mart|hub|expo|snapshots)$&#039;\n        )\n{%- endmacro %}\n\ndelete_old_models.sql\n\n{% macro delete_old_models() -%}\n{% set query = list_deleted_models() %}\n{% set results = run_query(query) %}\n \n{% set drop_commands = [] %}\n \n{# Process the query results #}\n{% if results and results.columns %}\n    {% for row in results.rows %}\n        {% set catalog = row[&#039;table_catalog&#039;] %}\n        {% set dataset = row[&#039;table_schema&#039;] %}\n        {% set table = row[&#039;table_name&#039;] %}\n        \n        {# Construct the DROP TABLE command #}\n        {% set drop_command = &quot;DROP TABLE {}.{}.{}&quot;.format(catalog, dataset, table) %}\n        {% do drop_commands.append(drop_command) %}\n    {% endfor %}\n{% endif %}\n \n{# Execute each DROP TABLE command #}\n{% for command in drop_commands %}\n    {% do run_query(command) %}\n{% endfor %}\n{% endmacro %}\nI split it in two macros to avoid having 1 big macro to maintain but it’s totally relevant to have only one macro to call.\non-run-end config\nThen I use the on-run-end project config in dbt_project.yml in order to execute the delete_old_models macro at each run.\non-run-end:\n  - &quot;{{ delete_old_models() }}&quot;\nBased on that everyday the removed models are deleted in BigQuery.\nConclusion\nHere a quick method to delete deprecated models for BigQuery but I’m pretty convinced that it could be done elsewhere.\nSource of the creation of this:\ndiscourse.getdbt.com/t/faq-cleaning-up-removed-models-from-your-production-schema/113"},"index":{"title":"Welcome to my engineering blog","links":["how-to-delete-old-dbt-models-bigquery"],"tags":[],"content":"This is a blank Quartz installation.\nSee the documentation for how to get started.\nhow-to-delete-old-dbt-models-bigquery"},"test":{"title":"Caviar-airways: discover the world through music","links":[],"tags":["html","js","website","music"],"content":"Introduction\nI love music! I know, it’s not very original since a lot of people spend a lot of their time listening music. With a friend in my business school we did our thesis together by mixing our two passions: music (his) and computer science (mine). This is why we chose the impact of the recommandation algorithms in the music industry.\nTwo years after our graduation, he came to me with an idea. He wanted to create a map with some pin points on it in order to redirect to his Spotify playlists (take a look at his YouTube channel). Unfortunately, he’s not good at programming so I suggested that I would take the lead of the code and I’ll try to interpret as much as I can how he pictured the website.\nThis idea came from Gatien Tamalet, I built the website for him. If you want to visit the website it’s here:\ngraceful-clear-kangaroo.glitch.me\nThe born of caviar-airways.com\nFunny thing to mention, I just said my friend is not good at programming (logical since he doesn’t know how to code), however I don’t have any professional front-end (neither back-end) skills. I learnt by myself watching some videos on YouTube but I’m specialized in the data field. This is why the website was built with almost pure HTML, CSS and vanilla JS (I just used jQuery because I was familiar with it for the administration interface).\nThe idea is pretty simple: a map on which you can find points, if the user hovers one of them, the Airport tiles in the header will move to the “destination”. The name of the playlist and the picture are displayed and if the user clicks on it, he/she will be redirected to the Spotify playlist.\nThe choice of the map technology\nMaybe you heard about it but the Google maps API is not free anymore. Indeed, they gave you $200 credits per month but still you need to provide some banking information. So instead of using OpenStreet Map which is 100% free I decided to try Mapbox. They have quite a generous free-tier (100,000 monthly requests).\nThe choice of the data format\nBased of the documentation of Mapbox I used a .geojson which is quite convenient to use because I was already familiar with .json format. For every point I wanted to create I filled:\n\na unique id\nthe name of the playlist\nthe city that would be displayed in the Airport tiles\nthe link of the Spotify playlist\nthe coordinates with latitude and longitude of the point\nthe image link of the Spotify\n\nThe technology behind the airport tiles\nTo be fully transparent with you I found it on a codepen after searching on Google, it’s done with pure JavaScript and CSS (codepen.io/chonz0/pen/NGRbWj or codepen.io/artsunique/pen/jOdORNY).\nThe admin interface\nSince I chose to build everything in pure HTML, CSS and JavaScript (except for jQuery library) I decided to create an admin interface from scratch.\nThe interface is quite simple as you can see\n\n  \n  Screenshot of the Admin Homepage\n\nAdd a new point\nYou can add a new point by filling the following information:\n\nlabel: name that will be displayed under the playlist image\ncity: name of the destination for the airport tiles\nlink: link of the playlist\ncoordinates:  latitude &amp; longitude separated by a comma\n\nWhenever you click “Send”, the playlist will be added to the .geojson and will be displayed on the map.\nFetch covers from Spotify\nThis button is quite simple, it just fetches all the cover images and update them if necessary.\nModification / deletion of a point\nUnder there is a table with all existing playlists. On the right there are two buttons:\n\nThe first one when you click on it you can modify all the fields (except for the image) and you need to click again to save the modifications\n\n\n2. The second one is a deletion button in order to remove a point from the map\n\nConclusion\nThat’s it! It was a pretty simple and fun project to do. To be honest I would like at some point to update the code base to something more modern (jQuery is so old…). If so, I’ll update this page with details on the new technology used."}}